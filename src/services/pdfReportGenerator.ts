import jsPDF from 'jspdf'
import { Client, ClientTransaction, ClientSummary, ExportOptions, CompanyInfo } from '../types/client'

interface ReportData {
  client: Client
  transactions: ClientTransaction[]
  summary: ClientSummary
  reportNumber: string
  generatedBy: string
  companyInfo: CompanyInfo
}

export class PDFReportGenerator {
  private pdf: jsPDF
  private currentY: number = 0
  private pageWidth: number = 0
  private pageHeight: number = 0
  private margin: number = 20

  constructor() {
    this.pdf = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4'
    })
    this.pageWidth = this.pdf.internal.pageSize.width
    this.pageHeight = this.pdf.internal.pageSize.height
  }

  private getTranslations(language: 'EN' | 'AR') {
    return {
      EN: {
        clientReport: 'Client Financial Report',
        invoice: 'Invoice',
        statement: 'Financial Statement',
        reportNumber: 'Report Number',
        generatedOn: 'Generated On',
        generatedBy: 'Generated By',
        clientDetails: 'Client Details',
        companyName: 'Company Name',
        email: 'Email',
        phone: 'Phone',
        address: 'Address',
        transactionHistory: 'Transaction History',
        orderNumber: 'Order #',
        date: 'Date',
        description: 'Description',
        site: 'Site',
        totalAmount: 'Total Amount',
        paidAmount: 'Paid Amount',
        remaining: 'Remaining',
        status: 'Status',
        summary: 'Financial Summary',
        totalOrders: 'Total Orders',
        totalRevenue: 'Total Revenue',
        totalPaid: 'Total Paid',
        totalRemaining: 'Total Remaining',
        overdueAmount: 'Overdue Amount',
        lastTransaction: 'Last Transaction',
        averageOrder: 'Average Order Value',
        paid: 'Paid',
        partial: 'Partial',
        pending: 'Pending',
        overdue: 'Overdue',
        authorizedBy: 'Authorized by Finance Department',
        page: 'Page',
        of: 'of'
      },
      AR: {
        clientReport: 'تقرير مالي للعميل',
        invoice: 'فاتورة',
        statement: 'كشف مالي',
        reportNumber: 'رقم التقرير',
        generatedOn: 'تاريخ الإنشاء',
        generatedBy: 'أنشأ بواسطة',
        clientDetails: 'تفاصيل العميل',
        companyName: 'اسم الشركة',
        email: 'البريد الإلكتروني',
        phone: 'الهاتف',
        address: 'العنوان',
        transactionHistory: 'سجل المعاملات',
        orderNumber: 'رقم الطلب',
        date: 'التاريخ',
        description: 'الوصف',
        site: 'الموقع',
        totalAmount: 'المبلغ الإجمالي',
        paidAmount: 'المبلغ المدفوع',
        remaining: 'المتبقي',
        status: 'الحالة',
        summary: 'الملخص المالي',
        totalOrders: 'إجمالي الطلبات',
        totalRevenue: 'إجمالي الإيرادات',
        totalPaid: 'إجمالي المدفوع',
        totalRemaining: 'إجمالي المتبقي',
        overdueAmount: 'المبلغ المتأخر',
        lastTransaction: 'آخر معاملة',
        averageOrder: 'متوسط قيمة الطلب',
        paid: 'مدفوع',
        partial: 'جزئي',
        pending: 'معلق',
        overdue: 'متأخر',
        authorizedBy: 'مصرح من قسم المالية',
        page: 'صفحة',
        of: 'من'
      }
    }[language]
  }

  private addHeader(reportData: ReportData, options: ExportOptions, reportType: 'invoice' | 'statement' | 'summary' = 'statement') {
    const t = this.getTranslations(options.language)
    const { companyInfo } = reportData
    const isArabic = options.language === 'AR'
    
    // Clean professional header
    this.currentY = 20
    
    // Simple company branding
    this.pdf.setTextColor(44, 62, 80)
    this.pdf.setFontSize(20)
    this.pdf.setFont('Arial', 'bold')
    
    if (isArabic) {
      this.pdf.text(companyInfo.name, this.pageWidth - this.margin, this.currentY, { align: 'right' })
    } else {
      this.pdf.text(companyInfo.name, this.margin, this.currentY)
    }
    
    // Company contact info
    this.pdf.setFontSize(10)
    this.pdf.setFont('Arial', 'normal')
    this.pdf.setTextColor(100, 100, 100)
    
    const contactInfo = [
      `${companyInfo.address?.street || ''}, ${companyInfo.address?.city || ''}`,
      `Tel: ${companyInfo.contact?.phone || ''} | Email: ${companyInfo.contact?.email || ''}`,
      companyInfo.contact?.website || '',
      companyInfo.taxNumber ? `Tax Number: ${companyInfo.taxNumber}` : ''
    ].filter(info => info.trim())
    
    contactInfo.forEach((info, index) => {
      const yPos = this.currentY + 15 + (index * 8)
      if (isArabic) {
        this.pdf.text(info, this.pageWidth - this.margin, yPos, { align: 'right' })
      } else {
        this.pdf.text(info, this.margin, yPos)
      }
    })

    this.currentY += 60

    // Clean document title
    const titleColors = {
      invoice: [220, 53, 69],
      statement: [52, 73, 94], 
      summary: [102, 16, 242]
    }
    
    const titleColor = titleColors[reportType]
    this.pdf.setTextColor(titleColor[0], titleColor[1], titleColor[2])
    this.pdf.setFontSize(18)
    this.pdf.setFont('Arial', 'bold')
    
    const reportTitles = {
      invoice: isArabic ? 'فاتورة' : 'Invoice',
      statement: isArabic ? 'كشف مالي' : 'Financial Statement',
      summary: isArabic ? 'تقرير موجز' : 'Summary Report'
    }
    
    this.pdf.text(
      reportTitles[reportType],
      this.pageWidth / 2,
      this.currentY,
      { align: 'center' }
    )

    this.currentY += 20

    // Report metadata - clean design
    this.pdf.setFontSize(10)
    this.pdf.setTextColor(100, 100, 100)
    this.pdf.setFont('Arial', 'normal')
    
    const timestamp = new Date().toLocaleDateString(options.language === 'AR' ? 'ar-SA' : 'en-US')
    const reportInfo = `${t.reportNumber}: ${reportData.reportNumber} | ${t.generatedOn}: ${timestamp}`
    
    this.pdf.text(
      reportInfo,
      this.pageWidth / 2,
      this.currentY,
      { align: 'center' }
    )

    this.currentY += 15

    // Simple professional separator
    this.pdf.setDrawColor(200, 200, 200)
    this.pdf.setLineWidth(0.5)
    this.pdf.line(this.margin, this.currentY, this.pageWidth - this.margin, this.currentY)
    
    this.currentY += 20
  }

  private addClientDetails(client: Client, options: ExportOptions) {
    const t = this.getTranslations(options.language)
    const isArabic = options.language === 'AR'
    
    // Clean section header
    this.pdf.setFontSize(14)
    this.pdf.setFont('Arial', 'bold')
    this.pdf.setTextColor(52, 73, 94)
    
    if (isArabic) {
      this.pdf.text(t.clientDetails, this.pageWidth - this.margin, this.currentY, { align: 'right' })
    } else {
      this.pdf.text(t.clientDetails, this.margin, this.currentY)
    }
    
    this.currentY += 20
    
    // Clean client information box
    const boxHeight = 45
    const boxY = this.currentY
    
    // Simple light background
    this.pdf.setFillColor(250, 250, 250)
    this.pdf.rect(this.margin, boxY, this.pageWidth - 2 * this.margin, boxHeight, 'F')
    
    // Simple border
    this.pdf.setDrawColor(200, 200, 200)
    this.pdf.setLineWidth(0.5)
    this.pdf.rect(this.margin, boxY, this.pageWidth - 2 * this.margin, boxHeight)
    
    this.currentY += 10
    
    // Two-column layout for client info
    const leftColX = this.margin + 10
    const rightColX = this.pageWidth / 2 + 10
    
    this.pdf.setFontSize(10)
    this.pdf.setFont('Arial', 'normal')
    this.pdf.setTextColor(0, 0, 0)
    
    // Left column
    const leftInfo = [
      [`${t.companyName || 'Name'}:`, client.companyName || client.name],
      [`${t.email}:`, client.email],
      [`${t.phone}:`, client.phone || 'N/A']
    ]
    
    // Right column  
    const rightInfo = [
      client.address ? [`${t.address}:`, client.address] : null,
      client.taxNumber ? [`Tax Number:`, client.taxNumber] : null,
      [`Client ID:`, client.id.slice(-8).toUpperCase()]
    ].filter(Boolean) as [string, string][]
    
    leftInfo.forEach(([label, value], index) => {
      this.pdf.setFont('Arial', 'bold')
      this.pdf.setTextColor(80, 80, 80)
      this.pdf.text(label, leftColX, this.currentY + (index * 10))
      this.pdf.setFont('Arial', 'normal')
      this.pdf.setTextColor(0, 0, 0)
      this.pdf.text(value, leftColX + 40, this.currentY + (index * 10))
    })
    
    rightInfo.forEach(([label, value], index) => {
      this.pdf.setFont('Arial', 'bold')
      this.pdf.setTextColor(80, 80, 80)
      this.pdf.text(label, rightColX, this.currentY + (index * 10))
      this.pdf.setFont('Arial', 'normal')
      this.pdf.setTextColor(0, 0, 0)
      this.pdf.text(value, rightColX + 40, this.currentY + (index * 10))
    })
    
    this.currentY = boxY + boxHeight + 20
  }

  private addTransactionsTable(transactions: ClientTransaction[], options: ExportOptions) {
    const t = this.getTranslations(options.language)
    
    this.currentY += 15
    this.pdf.setFontSize(14)
    this.pdf.setFont('helvetica', 'bold')
    
    if (options.language === 'AR') {
      this.pdf.text(t.transactionHistory, this.pageWidth - this.margin, this.currentY, { align: 'right' })
    } else {
      this.pdf.text(t.transactionHistory, this.margin, this.currentY)
    }

    this.currentY += 15

    // Table headers
    const headers = options.language === 'AR' ? 
      [t.status, t.remaining, t.paidAmount, t.totalAmount, t.site, t.description, t.date, t.orderNumber] :
      [t.orderNumber, t.date, t.description, t.site, t.totalAmount, t.paidAmount, t.remaining, t.status]
    
    const colWidths = [25, 25, 40, 20, 30, 25, 25, 20]
    let startX = this.margin

    // Draw table header
    this.pdf.setFillColor(options.theme === 'dark' ? 50 : 240, options.theme === 'dark' ? 50 : 240, options.theme === 'dark' ? 50 : 240)
    this.pdf.rect(this.margin, this.currentY, this.pageWidth - 2 * this.margin, 15, 'F')
    
    this.pdf.setFontSize(10)
    this.pdf.setFont('helvetica', 'bold')
    
    headers.forEach((header, index) => {
      const x = options.language === 'AR' ? 
        this.pageWidth - this.margin - colWidths.slice(0, index + 1).reduce((sum, w) => sum + w, 0) :
        startX + colWidths.slice(0, index).reduce((sum, w) => sum + w, 0)
      
      this.pdf.text(header, x + 2, this.currentY + 10)
    })

    this.currentY += 15

    // Table rows
    this.pdf.setFont('helvetica', 'normal')
    transactions.forEach((transaction, rowIndex) => {
      if (this.currentY > this.pageHeight - 40) {
        this.addPage(options)
      }

      const dateLocale = options.language === 'AR' ? 'ar-AE' : 'en-US'
      const formattedDate = transaction.date.toLocaleDateString(dateLocale)
      
      const rowData = options.language === 'AR' ? [
        this.getStatusText(transaction.status, options.language),
        this.formatCurrency(transaction.remainingBalance, options.language),
        this.formatCurrency(transaction.paidAmount, options.language),
        this.formatCurrency(transaction.totalAmount, options.language),
        transaction.site || '-',
        transaction.description,
        formattedDate,
        transaction.orderNumber
      ] : [
        transaction.orderNumber,
        formattedDate,
        transaction.description,
        transaction.site || '-',
        this.formatCurrency(transaction.totalAmount, options.language),
        this.formatCurrency(transaction.paidAmount, options.language),
        this.formatCurrency(transaction.remainingBalance, options.language),
        this.getStatusText(transaction.status, options.language)
      ]

      // Alternate row background
      if (rowIndex % 2 === 1) {
        this.pdf.setFillColor(options.theme === 'dark' ? 30 : 250, options.theme === 'dark' ? 30 : 250, options.theme === 'dark' ? 30 : 250)
        this.pdf.rect(this.margin, this.currentY, this.pageWidth - 2 * this.margin, 12, 'F')
      }

      rowData.forEach((cell, colIndex) => {
        const x = options.language === 'AR' ? 
          this.pageWidth - this.margin - colWidths.slice(0, colIndex + 1).reduce((sum, w) => sum + w, 0) :
          startX + colWidths.slice(0, colIndex).reduce((sum, w) => sum + w, 0)
        
        this.pdf.text(String(cell), x + 2, this.currentY + 8)
      })

      this.currentY += 12
    })

    this.currentY += 10
    this.addLine()
  }

  private addSummary(summary: ClientSummary, options: ExportOptions) {
    const t = this.getTranslations(options.language)
    
    this.currentY += 15
    this.pdf.setFontSize(14)
    this.pdf.setFont('helvetica', 'bold')
    
    if (options.language === 'AR') {
      this.pdf.text(t.summary, this.pageWidth - this.margin, this.currentY, { align: 'right' })
    } else {
      this.pdf.text(t.summary, this.margin, this.currentY)
    }

    this.currentY += 20

    // Summary box
    const boxHeight = 80
    this.pdf.setFillColor(options.theme === 'dark' ? 40 : 248, options.theme === 'dark' ? 40 : 248, options.theme === 'dark' ? 40 : 248)
    this.pdf.rect(this.margin, this.currentY, this.pageWidth - 2 * this.margin, boxHeight, 'F')
    this.pdf.setDrawColor(options.theme === 'dark' ? 100 : 200)
    this.pdf.rect(this.margin, this.currentY, this.pageWidth - 2 * this.margin, boxHeight)

    this.pdf.setFontSize(12)
    this.pdf.setFont('helvetica', 'normal')

    const summaryItems = [
      `${t.totalOrders}: ${summary.totalOrders}`,
      `${t.totalRevenue}: ${this.formatCurrency(summary.totalAmount, options.language)}`,
      `${t.totalPaid}: ${this.formatCurrency(summary.totalPaid, options.language)}`,
      `${t.totalRemaining}: ${this.formatCurrency(summary.totalRemaining, options.language)}`,
      summary.overdueAmount > 0 ? `${t.overdueAmount}: ${this.formatCurrency(summary.overdueAmount, options.language)}` : '',
      `${t.averageOrder}: ${this.formatCurrency(summary.averageOrderValue, options.language)}`
    ].filter(Boolean)

    summaryItems.forEach((item, index) => {
      const yPos = this.currentY + 15 + (index * 12)
      if (options.language === 'AR') {
        this.pdf.text(item, this.pageWidth - this.margin - 10, yPos, { align: 'right' })
      } else {
        this.pdf.text(item, this.margin + 10, yPos)
      }
    })

    // Highlight overdue amount if exists
    if (summary.overdueAmount > 0) {
      this.pdf.setTextColor(220, 38, 38) // Red color
      const overdueText = `${t.overdueAmount}: ${this.formatCurrency(summary.overdueAmount, options.language)}`
      const overdueIndex = summaryItems.findIndex(item => item.includes(t.overdueAmount))
      if (overdueIndex >= 0) {
        const yPos = this.currentY + 15 + (overdueIndex * 12)
        if (options.language === 'AR') {
          this.pdf.text(overdueText, this.pageWidth - this.margin - 10, yPos, { align: 'right' })
        } else {
          this.pdf.text(overdueText, this.margin + 10, yPos)
        }
      }
      this.pdf.setTextColor(0, 0, 0) // Reset to black
    }

    this.currentY += boxHeight + 20
  }

  private addFooter(options: ExportOptions) {
    const t = this.getTranslations(options.language)
    const footerY = this.pageHeight - 20
    
    this.pdf.setFontSize(10)
    this.pdf.setFont('helvetica', 'italic')
    
    if (options.includeSignature) {
      const signatureText = options.customFooter || t.authorizedBy
      if (options.language === 'AR') {
        this.pdf.text(signatureText, this.pageWidth - this.margin, footerY - 10, { align: 'right' })
      } else {
        this.pdf.text(signatureText, this.margin, footerY - 10)
      }
    }

    // Page number
    const pageNum = this.pdf.getNumberOfPages()
    const pageText = `${t.page} 1 ${t.of} ${pageNum}`
    this.pdf.text(pageText, this.pageWidth / 2, footerY, { align: 'center' })
  }

  private addLine() {
    this.pdf.setDrawColor(200)
    this.pdf.line(this.margin, this.currentY, this.pageWidth - this.margin, this.currentY)
  }

  private addPage(options: ExportOptions) {
    this.pdf.addPage()
    this.currentY = 30
  }

  private formatCurrency(amount: number, language: 'EN' | 'AR'): string {
    const formatted = new Intl.NumberFormat('en-US').format(amount)
    return language === 'AR' ? `${formatted} د.إ` : `$${formatted}`
  }

  private getStatusText(status: ClientTransaction['status'], language: 'EN' | 'AR'): string {
    const t = this.getTranslations(language)
    return t[status] || status
  }

  private addInvoiceSpecificContent(reportData: ReportData, options: ExportOptions) {
    const t = this.getTranslations(options.language)
    
    // Invoice-specific styling and content
    this.currentY += 15
    
    // Due date highlight for invoices
    const nearestDueTransaction = reportData.transactions
      .filter(t => t.status !== 'paid')
      .sort((a, b) => (a.dueDate?.getTime() || 0) - (b.dueDate?.getTime() || 0))[0]
    
    if (nearestDueTransaction) {
      const isOverdue = nearestDueTransaction.dueDate && nearestDueTransaction.dueDate < new Date()
      this.pdf.setFillColor(isOverdue ? 239 : 254, isOverdue ? 68 : 243, isOverdue ? 68 : 199)
      this.pdf.rect(this.margin, this.currentY, this.pageWidth - 2 * this.margin, 25, 'F')
      
      this.pdf.setFontSize(12)
      this.pdf.setFont('helvetica', 'bold')
      this.pdf.setTextColor(isOverdue ? 220 : 37, isOverdue ? 38 : 99, isOverdue ? 38 : 183)
      
      const dueDateText = isOverdue ?
        `⚠️ ${options.language === 'AR' ? 'متأخر - استحقاق:' : 'OVERDUE - Due:'} ${nearestDueTransaction.dueDate?.toLocaleDateString() || ''}` :
        `📅 ${options.language === 'AR' ? 'تاريخ الاستحقاق:' : 'Payment Due:'} ${nearestDueTransaction.dueDate?.toLocaleDateString() || ''}`
      
      this.pdf.text(dueDateText, this.pageWidth / 2, this.currentY + 15, { align: 'center' })
      this.pdf.setTextColor(0, 0, 0)
      this.currentY += 35
    }
  }
  
  private addSummarySpecificContent(reportData: ReportData, options: ExportOptions) {
    const t = this.getTranslations(options.language)
    
    // Summary-specific charts and analytics
    this.currentY += 20
    
    // Payment status breakdown
    const statusCounts = reportData.transactions.reduce((acc, t) => {
      acc[t.status] = (acc[t.status] || 0) + 1
      return acc
    }, {} as Record<string, number>)
    
    this.pdf.setFontSize(14)
    this.pdf.setFont('helvetica', 'bold')
    const analyticsTitle = options.language === 'AR' ? '📊 تحليل الحالة المالية' : '📊 Payment Status Analysis'
    this.pdf.text(analyticsTitle, this.margin, this.currentY)
    
    this.currentY += 20
    this.pdf.setFontSize(11)
    this.pdf.setFont('helvetica', 'normal')
    
    Object.entries(statusCounts).forEach(([status, count], index) => {
      const statusText = `${this.getStatusText(status as any, options.language)}: ${count} ${options.language === 'AR' ? 'معاملة' : 'transactions'}`
      this.pdf.text(statusText, this.margin + 10, this.currentY + (index * 12))
    })
    
    this.currentY += Object.keys(statusCounts).length * 12 + 15
  }

  async generateClientReport(
    reportData: ReportData, 
    options: ExportOptions,
    reportType: 'invoice' | 'statement' | 'summary' = 'statement'
  ): Promise<Blob> {
    // Reset PDF with enhanced settings
    this.pdf = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4'
    })
    this.currentY = 0
    this.pageWidth = this.pdf.internal.pageSize.width
    this.pageHeight = this.pdf.internal.pageSize.height

    // Apply theme
    if (options.theme === 'dark') {
      this.pdf.setFillColor(30, 30, 30)
      this.pdf.rect(0, 0, this.pageWidth, this.pageHeight, 'F')
    }

    // Add content sections with clean professional styling
    this.addHeader(reportData, options, reportType)
    
    if (reportType === 'invoice') {
      this.addInvoiceSpecificContent(reportData, options)
    }
    
    this.addClientDetails(reportData.client, options)
    this.addTransactionsTable(reportData.transactions, options)
    
    if (reportType === 'summary') {
      this.addSummarySpecificContent(reportData, options)
    }
    
    this.addSummary(reportData.summary, options)
    this.addFooter(options)

    // Convert to blob
    return new Promise((resolve) => {
      const pdfBlob = this.pdf.output('blob')
      resolve(pdfBlob)
    })
  }

  private addDramaticClientDetails(client: Client, options: ExportOptions) {
    const t = this.getTranslations(options.language)
    const isArabic = options.language === 'AR'
    
    // DRAMATIC SECTION HEADER
    this.addDramaticSectionHeader(t.clientDetails, '👤')
    
    // Client information box with PROFESSIONAL styling
    const boxHeight = 55
    const boxY = this.currentY
    
    // Main border with shadow effect
    this.pdf.setFillColor(0, 0, 0, 0.1)
    this.pdf.rect(this.margin + 2, boxY + 2, this.pageWidth - 2 * this.margin, boxHeight, 'F')
    
    this.pdf.setDrawColor(52, 73, 94)
    this.pdf.setLineWidth(1)
    this.pdf.rect(this.margin, boxY, this.pageWidth - 2 * this.margin, boxHeight)
    
    // Background with elegant gradient simulation
    this.pdf.setFillColor(250, 251, 252)
    this.pdf.rect(this.margin + 0.5, boxY + 0.5, this.pageWidth - 2 * this.margin - 1, boxHeight - 1, 'F')
    
    this.currentY += 12
    
    // Client info in elegant two-column layout
    const leftColX = this.margin + 15
    const rightColX = this.pageWidth / 2 + 15
    
    this.pdf.setFontSize(11)
    this.pdf.setFont('Arial', 'normal')
    this.pdf.setTextColor(0, 0, 0)
    
    // Left column info
    const leftInfo = [
      [`👤 ${t.companyName || 'Name'}:`, client.companyName || client.name],
      [`📧 ${t.email}:`, client.email],
      [`📞 ${t.phone}:`, client.phone || 'N/A']
    ]
    
    // Right column info
    const rightInfo = [
      client.address ? [`📍 ${t.address}:`, client.address] : null,
      client.taxNumber ? [`🏛️ Tax Number:`, client.taxNumber] : null,
      [`📅 Client ID:`, client.id.slice(-8).toUpperCase()]
    ].filter(Boolean) as [string, string][]
    
    leftInfo.forEach(([label, value], index) => {
      this.pdf.setFont('Arial', 'bold')
      this.pdf.setTextColor(52, 73, 94)
      this.pdf.text(label, leftColX, this.currentY + (index * 10))
      this.pdf.setFont('Arial', 'normal')
      this.pdf.setTextColor(0, 0, 0)
      this.pdf.text(value, leftColX + 45, this.currentY + (index * 10))
    })
    
    rightInfo.forEach(([label, value], index) => {
      this.pdf.setFont('Arial', 'bold')
      this.pdf.setTextColor(52, 73, 94)
      this.pdf.text(label, rightColX, this.currentY + (index * 10))
      this.pdf.setFont('Arial', 'normal')
      this.pdf.setTextColor(0, 0, 0)
      this.pdf.text(value, rightColX + 45, this.currentY + (index * 10))
    })
    
    // Vertical divider
    this.pdf.setDrawColor(189, 195, 199)
    this.pdf.setLineWidth(0.5)
    this.pdf.line(this.pageWidth / 2, boxY + 8, this.pageWidth / 2, boxY + boxHeight - 8)
    
    this.currentY = boxY + boxHeight + 20
  }

  private addDramaticTransactionsTable(transactions: ClientTransaction[], options: ExportOptions) {
    const t = this.getTranslations(options.language)
    const isArabic = options.language === 'AR'
    
    // DRAMATIC SECTION HEADER
    this.addDramaticSectionHeader(t.transactionHistory, '💼')
    
    if (transactions.length === 0) {
      this.pdf.setFontSize(14)
      this.pdf.setTextColor(108, 117, 125)
      this.pdf.text(
        isArabic ? 'لا توجد معاملات' : 'No transactions found',
        this.pageWidth / 2,
        this.currentY + 20,
        { align: 'center' }
      )
      return
    }

    // ENHANCED TABLE with dramatic styling
    const tableY = this.currentY
    const rowHeight = 15
    const headerHeight = 18
    
    // Table headers with DRAMATIC background
    this.pdf.setFillColor(52, 73, 94)
    this.pdf.rect(this.margin, tableY, this.pageWidth - 2 * this.margin, headerHeight, 'F')
    
    this.pdf.setFontSize(11)
    this.pdf.setFont('Arial', 'bold')
    this.pdf.setTextColor(255, 255, 255)
    
    const headers = [
      t.orderNumber,
      t.date,
      t.description,
      t.totalAmount,
      t.paidAmount,
      t.remaining,
      t.status
    ]
    
    const colWidths = [25, 25, 45, 25, 25, 25, 20]
    let currentX = this.margin + 5
    
    headers.forEach((header, index) => {
      this.pdf.text(header, currentX, tableY + 12)
      currentX += colWidths[index]
    })
    
    this.currentY = tableY + headerHeight
    
    // Table rows with alternating backgrounds
    transactions.forEach((transaction, rowIndex) => {
      if (this.currentY > this.pageHeight - 60) {
        this.pdf.addPage()
        this.currentY = 30
      }
      
      // Alternating row colors
      const bgColor = rowIndex % 2 === 0 ? 255 : 248
      this.pdf.setFillColor(bgColor, bgColor, bgColor)
      this.pdf.rect(this.margin, this.currentY, this.pageWidth - 2 * this.margin, rowHeight, 'F')
      
      // Row border
      this.pdf.setDrawColor(220, 220, 220)
      this.pdf.setLineWidth(0.3)
      this.pdf.rect(this.margin, this.currentY, this.pageWidth - 2 * this.margin, rowHeight)
      
      // Row data
      this.pdf.setFontSize(9)
      this.pdf.setFont('Arial', 'normal')
      this.pdf.setTextColor(0, 0, 0)
      
      const rowData = [
        transaction.orderNumber,
        transaction.date.toLocaleDateString(isArabic ? 'ar-SA' : 'en-US'),
        transaction.description.length > 20 ? transaction.description.slice(0, 18) + '...' : transaction.description,
        this.formatCurrency(transaction.totalAmount, options.language),
        this.formatCurrency(transaction.paidAmount, options.language),
        this.formatCurrency(transaction.remainingBalance, options.language),
        this.getStatusText(transaction.status, options.language)
      ]
      
      currentX = this.margin + 5
      rowData.forEach((cell, colIndex) => {
        // Color coding for amounts
        if (colIndex === 3) { // Total amount
          this.pdf.setTextColor(52, 73, 94)
          this.pdf.setFont('Arial', 'bold')
        } else if (colIndex === 4) { // Paid amount
          this.pdf.setTextColor(25, 135, 84)
          this.pdf.setFont('Arial', 'bold')
        } else if (colIndex === 5) { // Remaining
          const remainingColor = transaction.remainingBalance > 0 ? [220, 53, 69] : [25, 135, 84]
          this.pdf.setTextColor(remainingColor[0], remainingColor[1], remainingColor[2])
          this.pdf.setFont('Arial', 'bold')
        } else if (colIndex === 6) { // Status
          const statusColors = {
            'paid': [25, 135, 84],
            'partial': [255, 193, 7],
            'pending': [13, 110, 253],
            'overdue': [220, 53, 69]
          }
          const color = statusColors[transaction.status as keyof typeof statusColors] || [108, 117, 125]
          this.pdf.setTextColor(color[0], color[1], color[2])
          this.pdf.setFont('Arial', 'bold')
        } else {
          this.pdf.setTextColor(0, 0, 0)
          this.pdf.setFont('Arial', 'normal')
        }
        
        this.pdf.text(String(cell), currentX, this.currentY + 10)
        currentX += colWidths[colIndex]
      })
      
      this.currentY += rowHeight
    })
    
    this.currentY += 20
  }

  private addDramaticSummary(summary: ClientSummary, options: ExportOptions) {
    const t = this.getTranslations(options.language)
    const isArabic = options.language === 'AR'
    
    // DRAMATIC SECTION HEADER
    this.addDramaticSectionHeader(t.summary, '💰')
    
    // Summary cards with dramatic styling
    const cardWidth = (this.pageWidth - 2 * this.margin - 20) / 3
    const cardHeight = 35
    const cardY = this.currentY
    
    const summaryCards = [
      {
        title: t.totalOrders,
        value: summary.totalOrders.toString(),
        color: [102, 16, 242],
        icon: '📊'
      },
      {
        title: t.totalRevenue,
        value: this.formatCurrency(summary.totalAmount, options.language),
        color: [13, 110, 253],
        icon: '💵'
      },
      {
        title: t.totalPaid,
        value: this.formatCurrency(summary.totalPaid, options.language),
        color: [25, 135, 84],
        icon: '✅'
      }
    ]
    
    summaryCards.forEach((card, index) => {
      const cardX = this.margin + (index * (cardWidth + 10))
      
      // Card shadow
      this.pdf.setFillColor(0, 0, 0, 0.1)
      this.pdf.rect(cardX + 2, cardY + 2, cardWidth, cardHeight, 'F')
      
      // Card background
      this.pdf.setFillColor(card.color[0], card.color[1], card.color[2])
      this.pdf.rect(cardX, cardY, cardWidth, cardHeight, 'F')
      
      // Card border
      this.pdf.setDrawColor(card.color[0] - 20, card.color[1] - 20, card.color[2] - 20)
      this.pdf.setLineWidth(1)
      this.pdf.rect(cardX, cardY, cardWidth, cardHeight)
      
      // Card content
      this.pdf.setTextColor(255, 255, 255)
      this.pdf.setFontSize(16)
      this.pdf.setFont('Arial', 'bold')
      this.pdf.text(card.value, cardX + cardWidth/2, cardY + 15, { align: 'center' })
      
      this.pdf.setFontSize(10)
      this.pdf.setFont('Arial', 'normal')
      this.pdf.text(`${card.icon} ${card.title}`, cardX + cardWidth/2, cardY + 27, { align: 'center' })
    })
    
    this.currentY += cardHeight + 20
    
    // Outstanding balance highlight if exists
    if (summary.totalRemaining > 0) {
      const balanceHeight = 25
      this.pdf.setFillColor(255, 193, 7)
      this.pdf.rect(this.margin, this.currentY, this.pageWidth - 2 * this.margin, balanceHeight, 'F')
      
      this.pdf.setFontSize(16)
      this.pdf.setFont('Arial', 'bold')
      this.pdf.setTextColor(0, 0, 0)
      this.pdf.text(
        `💰 ${t.totalRemaining}: ${this.formatCurrency(summary.totalRemaining, options.language)}`,
        this.pageWidth / 2,
        this.currentY + 16,
        { align: 'center' }
      )
      
      this.currentY += balanceHeight + 15
    }
    
    // Overdue warning if exists
    if (summary.overdueAmount > 0) {
      const overdueHeight = 25
      this.pdf.setFillColor(220, 53, 69)
      this.pdf.rect(this.margin, this.currentY, this.pageWidth - 2 * this.margin, overdueHeight, 'F')
      
      this.pdf.setFontSize(16)
      this.pdf.setFont('Arial', 'bold')
      this.pdf.setTextColor(255, 255, 255)
      this.pdf.text(
        `⚠️ ${t.overdueAmount}: ${this.formatCurrency(summary.overdueAmount, options.language)}`,
        this.pageWidth / 2,
        this.currentY + 16,
        { align: 'center' }
      )
      
      this.currentY += overdueHeight + 15
    }
  }

  private addDramaticInvoiceContent(reportData: ReportData, options: ExportOptions) {
    const t = this.getTranslations(options.language)
    
    // DRAMATIC invoice-specific content
    const nearestDueTransaction = reportData.transactions
      .filter(t => t.status !== 'paid')
      .sort((a, b) => (a.dueDate?.getTime() || 0) - (b.dueDate?.getTime() || 0))[0]
    
    if (nearestDueTransaction) {
      const isOverdue = nearestDueTransaction.dueDate && nearestDueTransaction.dueDate < new Date()
      const alertHeight = 30
      
      // Alert background with dramatic styling
      this.pdf.setFillColor(0, 0, 0, 0.1)
      this.pdf.rect(this.margin + 2, this.currentY + 2, this.pageWidth - 2 * this.margin, alertHeight, 'F')
      
      this.pdf.setFillColor(isOverdue ? 220 : 13, isOverdue ? 53 : 110, isOverdue ? 69 : 253)
      this.pdf.rect(this.margin, this.currentY, this.pageWidth - 2 * this.margin, alertHeight, 'F')
      
      this.pdf.setDrawColor(isOverdue ? 185 : 37, isOverdue ? 28 : 99, isOverdue ? 28 : 183)
      this.pdf.setLineWidth(2)
      this.pdf.rect(this.margin, this.currentY, this.pageWidth - 2 * this.margin, alertHeight)
      
      this.pdf.setFontSize(14)
      this.pdf.setFont('Arial', 'bold')
      this.pdf.setTextColor(255, 255, 255)
      
      const dueDateText = isOverdue ?
        `⚠️ ${options.language === 'AR' ? 'متأخر - استحقاق:' : 'OVERDUE - Due:'} ${nearestDueTransaction.dueDate?.toLocaleDateString() || ''}` :
        `📅 ${options.language === 'AR' ? 'تاريخ الاستحقاق:' : 'Payment Due:'} ${nearestDueTransaction.dueDate?.toLocaleDateString() || ''}`
      
      this.pdf.text(dueDateText, this.pageWidth / 2, this.currentY + 20, { align: 'center' })
      this.currentY += alertHeight + 20
    }
  }
  
  private addDramaticSummaryContent(reportData: ReportData, options: ExportOptions) {
    const t = this.getTranslations(options.language)
    
    // DRAMATIC analytics section
    this.addDramaticSectionHeader(
      options.language === 'AR' ? '📊 تحليل الحالة المالية' : '📊 Payment Status Analysis',
      '📈'
    )
    
    // Payment status breakdown with colored bars
    const statusCounts = reportData.transactions.reduce((acc, t) => {
      acc[t.status] = (acc[t.status] || 0) + 1
      return acc
    }, {} as Record<string, number>)
    
    const statusColors = {
      'paid': [25, 135, 84],
      'partial': [255, 193, 7],
      'pending': [13, 110, 253],
      'overdue': [220, 53, 69]
    }
    
    const maxCount = Math.max(...Object.values(statusCounts))
    const barMaxWidth = this.pageWidth - 2 * this.margin - 80
    
    Object.entries(statusCounts).forEach(([status, count], index) => {
      const barWidth = (count / maxCount) * barMaxWidth
      const barY = this.currentY + (index * 18)
      const color = statusColors[status as keyof typeof statusColors] || [108, 117, 125]
      
      // Status bar background
      this.pdf.setFillColor(240, 240, 240)
      this.pdf.rect(this.margin + 60, barY, barMaxWidth, 12, 'F')
      
      // Status bar
      this.pdf.setFillColor(color[0], color[1], color[2])
      this.pdf.rect(this.margin + 60, barY, barWidth, 12, 'F')
      
      // Status label
      this.pdf.setFontSize(11)
      this.pdf.setFont('Arial', 'bold')
      this.pdf.setTextColor(color[0], color[1], color[2])
      this.pdf.text(`${this.getStatusText(status as any, options.language)}: ${count}`, this.margin + 5, barY + 8)
    })
    
    this.currentY += Object.keys(statusCounts).length * 18 + 15
  }

  private addDramaticSectionHeader(title: string, icon?: string) {
    // Section header background with gradient
    this.pdf.setFillColor(44, 62, 80)
    this.pdf.rect(this.margin, this.currentY, this.pageWidth - 2 * this.margin, 15, 'F')
    
    // Top accent line
    this.pdf.setFillColor(255, 193, 7)
    this.pdf.rect(this.margin, this.currentY, this.pageWidth - 2 * this.margin, 3, 'F')
    
    // Section header text
    this.pdf.setFontSize(14)
    this.pdf.setFont('Arial', 'bold')
    this.pdf.setTextColor(255, 255, 255)
    const headerText = icon ? `${icon} ${title}` : title
    this.pdf.text(headerText, this.margin + 10, this.currentY + 10)
    
    this.currentY += 20
  }

  private addDramaticFooter(options: ExportOptions) {
    const t = this.getTranslations(options.language)
    const footerY = this.pageHeight - 55
    
    // DRAMATIC footer background
    this.pdf.setFillColor(44, 62, 80)
    this.pdf.rect(this.margin, footerY, this.pageWidth - 2 * this.margin, 50, 'F')
    
    // Top accent stripe
    this.pdf.setFillColor(255, 193, 7)
    this.pdf.rect(this.margin, footerY, this.pageWidth - 2 * this.margin, 4, 'F')
    
    // Footer border
    this.pdf.setDrawColor(52, 73, 94)
    this.pdf.setLineWidth(1.5)
    this.pdf.rect(this.margin, footerY, this.pageWidth - 2 * this.margin, 50)
    
    // Authorization signature with DRAMATIC styling
    if (options.includeSignature) {
      this.pdf.setFontSize(12)
      this.pdf.setFont('Arial', 'bold')
      this.pdf.setTextColor(255, 255, 255)
      
      const signatureText = options.customFooter || t.authorizedBy
      
      this.pdf.text(
        `✓ ${signatureText}`,
        this.pageWidth / 2,
        footerY + 18,
        { align: 'center' }
      )
      
      // Signature line with golden accent
      this.pdf.setDrawColor(255, 193, 7)
      this.pdf.setLineWidth(2)
      this.pdf.line(this.margin + 50, footerY + 28, this.pageWidth - this.margin - 50, footerY + 28)
    }

    // Enhanced page numbering
    const pageNum = this.pdf.getNumberOfPages()
    const pageText = `${t.page} 1 ${t.of} ${pageNum}`
    
    this.pdf.setFontSize(11)
    this.pdf.setFont('Arial', 'normal')
    this.pdf.setTextColor(189, 195, 199)
    this.pdf.text(pageText, this.pageWidth / 2, footerY + 40, { align: 'center' })
    
    // Generation timestamp
    this.pdf.setFontSize(8)
    this.pdf.setTextColor(174, 182, 191)
    const timestamp = new Date().toISOString().split('T')[0]
    this.pdf.text(
      `Generated: ${timestamp}`,
      this.pageWidth - this.margin - 5,
      footerY + 47,
      { align: 'right' }
    )
  }

  async downloadReport(
    reportData: ReportData, 
    options: ExportOptions,
    reportType: 'invoice' | 'statement' | 'summary' = 'statement'
  ): Promise<void> {
    const blob = await this.generateClientReport(reportData, options, reportType)
    const filename = `${reportType}_${reportData.client.name.replace(/\s+/g, '_')}_${reportData.reportNumber}.pdf`
    
    const url = URL.createObjectURL(blob)
    const link = document.createElement('a')
    link.href = url
    link.download = filename
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    URL.revokeObjectURL(url)
  }
}

export const pdfReportGenerator = new PDFReportGenerator()
export default pdfReportGenerator
