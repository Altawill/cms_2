import jsPDF from 'jspdf'

export interface EmployeeStatementData {
  employee: {
    id: string
    name: string
    position: string
    department: string
    employeeNumber?: string
    email?: string
    phone?: string
    joinDate?: string
  }
  payrollRecord: {
    id: string
    period: string
    baseSalary: number
    allowances: number
    overtimePay: number
    grossSalary: number
    deductions: number
    netSalary: number
    status: string
    processedDate?: string
    paidDate?: string
    workingDays: number
    overtimeHours: number
  }
  companyInfo: {
    name: string
    address: string
    phone: string
    email: string
    website?: string
    taxNumber?: string
    logo?: string
  }
  statementNumber: string
  generatedBy: string
}

export interface StatementOptions {
  language: 'EN' | 'AR'
  theme: 'light' | 'dark'
  includeLogo: boolean
  includeSignature: boolean
  includeTimestamp: boolean
  customFooter?: string
  includeQRCode?: boolean
  includeWatermark?: boolean
  colorScheme?: 'blue' | 'green' | 'purple' | 'corporate'
}

export class EmployeeStatementGenerator {
  private pdf: jsPDF
  private currentY: number = 0
  private pageWidth: number = 0
  private pageHeight: number = 0
  private margin: number = 20

  constructor() {
    this.pdf = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4'
    })
    this.pageWidth = this.pdf.internal.pageSize.width
    this.pageHeight = this.pdf.internal.pageSize.height
  }

  private getTranslations(language: 'EN' | 'AR') {
    return {
      EN: {
        employeeStatement: 'Employee Salary Statement',
        statementNumber: 'Statement Number',
        generatedOn: 'Generated On',
        generatedBy: 'Generated By',
        employeeDetails: 'Employee Information',
        name: 'Name',
        employeeNumber: 'Employee Number',
        position: 'Position',
        department: 'Department',
        email: 'Email',
        phone: 'Phone',
        joinDate: 'Join Date',
        salaryDetails: 'Salary Breakdown',
        payPeriod: 'Pay Period',
        workingDays: 'Working Days',
        overtimeHours: 'Overtime Hours',
        baseSalary: 'Base Salary',
        allowances: 'Allowances',
        overtimePay: 'Overtime Pay',
        grossSalary: 'Gross Salary',
        deductions: 'Deductions',
        netSalary: 'Net Salary',
        paymentStatus: 'Payment Status',
        processedDate: 'Processed Date',
        paidDate: 'Paid Date',
        authorizedBy: 'Authorized by Human Resources Department',
        page: 'Page',
        of: 'of',
        confidential: 'CONFIDENTIAL DOCUMENT',
        paid: 'PAID',
        processed: 'PROCESSED',
        pending: 'PENDING',
        earnings: 'EARNINGS',
        totalEarnings: 'Total Earnings',
        totalDeductions: 'Total Deductions',
        finalAmount: 'Final Net Amount'
      },
      AR: {
        employeeStatement: 'كشف راتب الموظف',
        statementNumber: 'رقم الكشف',
        generatedOn: 'تاريخ الإنشاء',
        generatedBy: 'أنشأ بواسطة',
        employeeDetails: 'معلومات الموظف',
        name: 'الاسم',
        employeeNumber: 'رقم الموظف',
        position: 'المنصب',
        department: 'القسم',
        email: 'البريد الإلكتروني',
        phone: 'الهاتف',
        joinDate: 'تاريخ الانضمام',
        salaryDetails: 'تفاصيل الراتب',
        payPeriod: 'فترة الدفع',
        workingDays: 'أيام العمل',
        overtimeHours: 'ساعات إضافية',
        baseSalary: 'الراتب الأساسي',
        allowances: 'البدلات',
        overtimePay: 'أجر الوقت الإضافي',
        grossSalary: 'الراتب الإجمالي',
        deductions: 'الخصومات',
        netSalary: 'الراتب الصافي',
        paymentStatus: 'حالة الدفع',
        processedDate: 'تاريخ المعالجة',
        paidDate: 'تاريخ الدفع',
        authorizedBy: 'مصرح من قسم الموارد البشرية',
        page: 'صفحة',
        of: 'من',
        confidential: 'وثيقة سرية',
        paid: 'مدفوع',
        processed: 'معالج',
        pending: 'معلق',
        earnings: 'الأرباح',
        totalEarnings: 'إجمالي الأرباح',
        totalDeductions: 'إجمالي الخصومات',
        finalAmount: 'المبلغ النهائي الصافي'
      }
    }[language]
  }

  private addHeader(statementData: EmployeeStatementData, options: StatementOptions) {
    const t = this.getTranslations(options.language)
    const { companyInfo } = statementData
    const isArabic = options.language === 'AR'
    
    // Add professional page border with gradient effect
    this.pdf.setDrawColor(41, 98, 255)
    this.pdf.setLineWidth(1.2)
    this.pdf.rect(5, 5, this.pageWidth - 10, this.pageHeight - 10)
    
    // Add inner border for elegance
    this.pdf.setDrawColor(100, 100, 100)
    this.pdf.setLineWidth(0.3)
    this.pdf.rect(8, 8, this.pageWidth - 16, this.pageHeight - 16)
    
    // Add header section with professional gradient background
    this.pdf.setDrawColor(41, 98, 255)
    this.pdf.setLineWidth(0.8)
    this.pdf.rect(this.margin, this.currentY, this.pageWidth - 2 * this.margin, 75)
    
    // Header background with gradient simulation
    this.pdf.setFillColor(245, 247, 250)
    this.pdf.rect(this.margin + 0.5, this.currentY + 0.5, this.pageWidth - 2 * this.margin - 1, 74, 'F')
    
    // Add top accent line
    this.pdf.setDrawColor(41, 98, 255)
    this.pdf.setLineWidth(3)
    this.pdf.line(this.margin, this.currentY, this.pageWidth - this.margin, this.currentY)
    
    this.currentY += 10
    
    // Enhanced logo section
    if (options.includeLogo) {
      const logoX = isArabic ? this.pageWidth - this.margin - 50 : this.margin + 8
      
      // Logo container with shadow effect
      this.pdf.setDrawColor(200, 200, 200)
      this.pdf.setLineWidth(0.5)
      this.pdf.rect(logoX, this.currentY, 45, 30)
      
      // Logo background
      this.pdf.setFillColor(255, 255, 255)
      this.pdf.rect(logoX + 1, this.currentY + 1, 43, 28, 'F')
      
      // Enhanced logo placeholder
      this.pdf.setFillColor(41, 98, 255)
      this.pdf.circle(logoX + 22.5, this.currentY + 15, 12, 'F')
      
      this.pdf.setFontSize(8)
      this.pdf.setFont('Arial', 'bold')
      this.pdf.setTextColor(255, 255, 255)
      this.pdf.text('LOGO', logoX + 22.5, this.currentY + 16, { align: 'center' })
    }
    
    // Enhanced company branding
    const textX = isArabic 
      ? this.pageWidth - this.margin - 12
      : this.margin + (options.includeLogo ? 60 : 12)
    
    // Company name with enhanced styling
    this.pdf.setTextColor(41, 98, 255)
    this.pdf.setFontSize(20)
    this.pdf.setFont('Arial', 'bold')
    this.pdf.text(
      companyInfo.name,
      textX,
      this.currentY + 8,
      { align: isArabic ? 'right' : 'left' }
    )
    
    // Contact information
    this.pdf.setFontSize(9)
    this.pdf.setFont('Arial', 'normal')
    this.pdf.setTextColor(60, 60, 60)
    
    const contactInfo = [
      companyInfo.address,
      `Tel: ${companyInfo.phone}`,
      `Email: ${companyInfo.email}`,
      companyInfo.website ? `Web: ${companyInfo.website}` : '',
      companyInfo.taxNumber ? `Tax: ${companyInfo.taxNumber}` : ''
    ].filter(Boolean)
    
    contactInfo.forEach((info, index) => {
      this.pdf.text(
        info,
        textX,
        this.currentY + 20 + (index * 6),
        { align: isArabic ? 'right' : 'left' }
      )
    })

    this.currentY += 75

    // Document title with enhanced styling
    this.pdf.setFillColor(52, 73, 94)
    this.pdf.rect(this.margin, this.currentY, this.pageWidth - 2 * this.margin, 20, 'F')
    
    this.pdf.setFontSize(22)
    this.pdf.setFont('Arial', 'bold')
    this.pdf.setTextColor(255, 255, 255)
    this.pdf.text(
      t.employeeStatement,
      this.pageWidth / 2,
      this.currentY + 13,
      { align: 'center' }
    )

    this.currentY += 25

    // Statement info with background
    this.pdf.setFillColor(236, 240, 241)
    this.pdf.rect(this.margin, this.currentY, this.pageWidth - 2 * this.margin, 15, 'F')
    this.pdf.setDrawColor(189, 195, 199)
    this.pdf.rect(this.margin, this.currentY, this.pageWidth - 2 * this.margin, 15)
    
    this.pdf.setFontSize(12)
    this.pdf.setFont('Arial', 'bold')
    this.pdf.setTextColor(44, 62, 80)
    
    const statementInfo = `${t.statementNumber}: ${statementData.statementNumber}`
    this.pdf.text(
      statementInfo,
      this.pageWidth / 2,
      this.currentY + 10,
      { align: 'center' }
    )

    this.currentY += 20

    // Confidential watermark
    this.pdf.setFontSize(10)
    this.pdf.setTextColor(220, 53, 69)
    this.pdf.setFont('Arial', 'bold')
    this.pdf.text(
      t.confidential,
      this.pageWidth / 2,
      this.currentY,
      { align: 'center' }
    )

    this.currentY += 15

    // Statement metadata
    if (options.includeTimestamp) {
      this.pdf.setFontSize(10)
      this.pdf.setTextColor(128, 128, 128)
      this.pdf.setFont('Arial', 'normal')
      
      const timestamp = new Date().toLocaleString(options.language === 'AR' ? 'ar-SA' : 'en-US')
      const reportInfo = [
        `${t.generatedOn}: ${timestamp}`,
        `${t.generatedBy}: ${statementData.generatedBy}`
      ]
      
      reportInfo.forEach((info, index) => {
        this.pdf.text(
          info,
          this.pageWidth / 2,
          this.currentY + (index * 8),
          { align: 'center' }
        )
      })
      this.currentY += 20
    }

    // Add professional separator
    this.pdf.setDrawColor(52, 73, 94)
    this.pdf.setLineWidth(0.8)
    this.pdf.line(this.margin, this.currentY, this.pageWidth - this.margin, this.currentY)
    this.currentY += 20
  }

  private addEmployeeDetails(statementData: EmployeeStatementData, options: StatementOptions) {
    const t = this.getTranslations(options.language)
    const { employee } = statementData
    const isArabic = options.language === 'AR'
    
    // Section header
    this.addSectionHeader(t.employeeDetails)
    
    // Employee information box with professional styling
    const boxHeight = 45
    const boxY = this.currentY
    
    // Main border
    this.pdf.setDrawColor(52, 73, 94)
    this.pdf.setLineWidth(0.5)
    this.pdf.rect(this.margin, boxY, this.pageWidth - 2 * this.margin, boxHeight)
    
    // Background
    this.pdf.setFillColor(250, 251, 252)
    this.pdf.rect(this.margin + 0.5, boxY + 0.5, this.pageWidth - 2 * this.margin - 1, boxHeight - 1, 'F')
    
    this.currentY += 8
    
    // Employee info in two columns
    const leftColX = this.margin + 10
    const rightColX = this.pageWidth / 2 + 10
    
    this.pdf.setFontSize(10)
    this.pdf.setFont('Arial', 'normal')
    this.pdf.setTextColor(0, 0, 0)
    
    // Left column
    const leftInfo = [
      [`${t.name}:`, employee.name],
      [`${t.position}:`, employee.position],
      [`${t.department}:`, employee.department]
    ]
    
    // Right column
    const rightInfo = [
      employee.employeeNumber ? [`${t.employeeNumber}:`, employee.employeeNumber] : null,
      employee.email ? [`${t.email}:`, employee.email] : null,
      employee.phone ? [`${t.phone}:`, employee.phone] : null,
      employee.joinDate ? [`${t.joinDate}:`, new Date(employee.joinDate).toLocaleDateString(options.language === 'AR' ? 'ar-SA' : 'en-US')] : null
    ].filter(Boolean) as [string, string][]
    
    leftInfo.forEach(([label, value], index) => {
      this.pdf.setFont('Arial', 'bold')
      this.pdf.text(label, leftColX, this.currentY + (index * 8))
      this.pdf.setFont('Arial', 'normal')
      this.pdf.text(value, leftColX + 35, this.currentY + (index * 8))
    })
    
    rightInfo.forEach(([label, value], index) => {
      this.pdf.setFont('Arial', 'bold')
      this.pdf.text(label, rightColX, this.currentY + (index * 8))
      this.pdf.setFont('Arial', 'normal')
      this.pdf.text(value, rightColX + 35, this.currentY + (index * 8))
    })
    
    // Vertical divider
    this.pdf.setDrawColor(189, 195, 199)
    this.pdf.setLineWidth(0.3)
    this.pdf.line(this.pageWidth / 2, boxY + 5, this.pageWidth / 2, boxY + boxHeight - 5)
    
    this.currentY = boxY + boxHeight + 20
  }

  private addSalaryBreakdown(statementData: EmployeeStatementData, options: StatementOptions) {
    const t = this.getTranslations(options.language)
    const { payrollRecord } = statementData
    const isArabic = options.language === 'AR'
    
    // Section header
    this.addSectionHeader(t.salaryDetails)
    
    // Pay period info box
    const periodBoxHeight = 20
    this.pdf.setFillColor(249, 249, 249)
    this.pdf.rect(this.margin, this.currentY, this.pageWidth - 2 * this.margin, periodBoxHeight, 'F')
    this.pdf.setDrawColor(189, 195, 199)
    this.pdf.rect(this.margin, this.currentY, this.pageWidth - 2 * this.margin, periodBoxHeight)
    
    this.pdf.setFontSize(12)
    this.pdf.setFont('Arial', 'bold')
    this.pdf.setTextColor(44, 62, 80)
    this.pdf.text(
      `${t.payPeriod}: ${payrollRecord.period}`,
      this.pageWidth / 2,
      this.currentY + 12,
      { align: 'center' }
    )
    
    this.currentY += periodBoxHeight + 15

    // Working hours summary
    this.pdf.setFontSize(10)
    this.pdf.setFont('Arial', 'normal')
    this.pdf.setTextColor(100, 100, 100)
    const workingInfo = `${t.workingDays}: ${payrollRecord.workingDays} | ${t.overtimeHours}: ${payrollRecord.overtimeHours}h`
    this.pdf.text(workingInfo, this.pageWidth / 2, this.currentY, { align: 'center' })
    this.currentY += 15

    // Earnings section
    this.addEarningsSection(payrollRecord, t, isArabic, options)
    
    // Deductions section  
    this.addDeductionsSection(payrollRecord, t, isArabic, options)
    
    // Final net salary section
    this.addNetSalarySection(payrollRecord, t, isArabic, options)
  }

  private addEarningsSection(payrollRecord: EmployeeStatementData['payrollRecord'], t: any, isArabic: boolean, options: StatementOptions) {
    // Earnings header
    this.pdf.setFillColor(40, 167, 69)
    this.pdf.rect(this.margin, this.currentY, this.pageWidth - 2 * this.margin, 12, 'F')
    
    this.pdf.setFontSize(12)
    this.pdf.setFont('Arial', 'bold')
    this.pdf.setTextColor(255, 255, 255)
    this.pdf.text(
      t.earnings,
      isArabic ? this.pageWidth - this.margin - 10 : this.margin + 10,
      this.currentY + 8,
      { align: isArabic ? 'right' : 'left' }
    )
    
    this.currentY += 15

    // Earnings details
    const earningsItems = [
      [t.baseSalary, this.formatCurrency(payrollRecord.baseSalary, options.language)],
      [t.allowances, this.formatCurrency(payrollRecord.allowances, options.language)],
      [t.overtimePay, this.formatCurrency(payrollRecord.overtimePay, options.language)]
    ]

    earningsItems.forEach(([label, amount], index) => {
      const bgColor = index % 2 === 0 ? 248 : 255
      this.pdf.setFillColor(bgColor, bgColor, bgColor)
      this.pdf.rect(this.margin, this.currentY, this.pageWidth - 2 * this.margin, 12, 'F')
      
      this.pdf.setFontSize(10)
      this.pdf.setFont('Arial', 'normal')
      this.pdf.setTextColor(0, 0, 0)
      
      if (isArabic) {
        this.pdf.text(label, this.pageWidth - this.margin - 10, this.currentY + 8, { align: 'right' })
        this.pdf.setFont('Arial', 'bold')
        this.pdf.text(amount, this.margin + 10, this.currentY + 8)
      } else {
        this.pdf.text(label, this.margin + 10, this.currentY + 8)
        this.pdf.setFont('Arial', 'bold')
        this.pdf.text(amount, this.pageWidth - this.margin - 10, this.currentY + 8, { align: 'right' })
      }
      
      this.currentY += 12
    })

    // Total earnings
    this.pdf.setFillColor(40, 167, 69, 0.2)
    this.pdf.rect(this.margin, this.currentY, this.pageWidth - 2 * this.margin, 15, 'F')
    this.pdf.setDrawColor(40, 167, 69)
    this.pdf.setLineWidth(0.5)
    this.pdf.rect(this.margin, this.currentY, this.pageWidth - 2 * this.margin, 15)
    
    this.pdf.setFontSize(12)
    this.pdf.setFont('Arial', 'bold')
    this.pdf.setTextColor(40, 167, 69)
    
    if (isArabic) {
      this.pdf.text(t.totalEarnings, this.pageWidth - this.margin - 10, this.currentY + 10, { align: 'right' })
      this.pdf.text(this.formatCurrency(payrollRecord.grossSalary, options.language), this.margin + 10, this.currentY + 10)
    } else {
      this.pdf.text(t.totalEarnings, this.margin + 10, this.currentY + 10)
      this.pdf.text(this.formatCurrency(payrollRecord.grossSalary, options.language), this.pageWidth - this.margin - 10, this.currentY + 10, { align: 'right' })
    }
    
    this.currentY += 25
  }

  private addDeductionsSection(payrollRecord: EmployeeStatementData['payrollRecord'], t: any, isArabic: boolean, options: StatementOptions) {
    // Deductions header
    this.pdf.setFillColor(220, 53, 69)
    this.pdf.rect(this.margin, this.currentY, this.pageWidth - 2 * this.margin, 12, 'F')
    
    this.pdf.setFontSize(12)
    this.pdf.setFont('Arial', 'bold')
    this.pdf.setTextColor(255, 255, 255)
    this.pdf.text(
      t.deductions,
      isArabic ? this.pageWidth - this.margin - 10 : this.margin + 10,
      this.currentY + 8,
      { align: isArabic ? 'right' : 'left' }
    )
    
    this.currentY += 15

    // For now showing total deductions - in real app you'd break down by type
    const deductionsBg = 255
    this.pdf.setFillColor(deductionsBg, deductionsBg, deductionsBg)
    this.pdf.rect(this.margin, this.currentY, this.pageWidth - 2 * this.margin, 12, 'F')
    
    this.pdf.setFontSize(10)
    this.pdf.setFont('Arial', 'normal')
    this.pdf.setTextColor(0, 0, 0)
    
    if (isArabic) {
      this.pdf.text(t.totalDeductions, this.pageWidth - this.margin - 10, this.currentY + 8, { align: 'right' })
      this.pdf.setFont('Arial', 'bold')
      this.pdf.text(this.formatCurrency(payrollRecord.deductions, options.language), this.margin + 10, this.currentY + 8)
    } else {
      this.pdf.text(t.totalDeductions, this.margin + 10, this.currentY + 8)
      this.pdf.setFont('Arial', 'bold')
      this.pdf.text(this.formatCurrency(payrollRecord.deductions, options.language), this.pageWidth - this.margin - 10, this.currentY + 8, { align: 'right' })
    }
    
    this.currentY += 25
  }

  private addNetSalarySection(payrollRecord: EmployeeStatementData['payrollRecord'], t: any, isArabic: boolean, options: StatementOptions) {
    // Final net salary - highlighted section
    const netSectionHeight = 25
    this.pdf.setFillColor(25, 135, 84)
    this.pdf.rect(this.margin, this.currentY, this.pageWidth - 2 * this.margin, netSectionHeight, 'F')
    this.pdf.setDrawColor(21, 128, 61)
    this.pdf.setLineWidth(1)
    this.pdf.rect(this.margin, this.currentY, this.pageWidth - 2 * this.margin, netSectionHeight)
    
    this.pdf.setFontSize(16)
    this.pdf.setFont('Arial', 'bold')
    this.pdf.setTextColor(255, 255, 255)
    
    if (isArabic) {
      this.pdf.text(t.finalAmount, this.pageWidth - this.margin - 10, this.currentY + 10, { align: 'right' })
      this.pdf.setFontSize(20)
      this.pdf.text(this.formatCurrency(payrollRecord.netSalary, options.language), this.margin + 10, this.currentY + 18)
    } else {
      this.pdf.text(t.finalAmount, this.margin + 10, this.currentY + 10)
      this.pdf.setFontSize(20)
      this.pdf.text(this.formatCurrency(payrollRecord.netSalary, options.language), this.pageWidth - this.margin - 10, this.currentY + 18, { align: 'right' })
    }
    
    this.currentY += netSectionHeight + 20
  }

  private addPaymentStatus(statementData: EmployeeStatementData, options: StatementOptions) {
    const t = this.getTranslations(options.language)
    const { payrollRecord } = statementData
    const isArabic = options.language === 'AR'
    
    // Payment status section
    this.addSectionHeader(t.paymentStatus)
    
    // Status badge with enhanced styling
    const statusColors = {
      'PAID': { bg: [25, 135, 84], text: [255, 255, 255] },
      'PROCESSED': { bg: [13, 110, 253], text: [255, 255, 255] },
      'PENDING': { bg: [255, 193, 7], text: [0, 0, 0] }
    }
    
    const statusColor = statusColors[payrollRecord.status as keyof typeof statusColors] || statusColors.PENDING
    const statusText = t[payrollRecord.status.toLowerCase() as keyof typeof t] || payrollRecord.status
    
    // Status container
    const statusBoxHeight = 30
    this.pdf.setFillColor(statusColor.bg[0], statusColor.bg[1], statusColor.bg[2])
    this.pdf.rect(this.margin, this.currentY, this.pageWidth - 2 * this.margin, statusBoxHeight, 'F')
    this.pdf.setDrawColor(statusColor.bg[0] - 20, statusColor.bg[1] - 20, statusColor.bg[2] - 20)
    this.pdf.setLineWidth(0.8)
    this.pdf.rect(this.margin, this.currentY, this.pageWidth - 2 * this.margin, statusBoxHeight)
    
    this.pdf.setFontSize(18)
    this.pdf.setFont('Arial', 'bold')
    this.pdf.setTextColor(statusColor.text[0], statusColor.text[1], statusColor.text[2])
    this.pdf.text(
      statusText.toUpperCase(),
      this.pageWidth / 2,
      this.currentY + 19,
      { align: 'center' }
    )
    
    this.currentY += statusBoxHeight + 15

    // Payment dates if available
    if (payrollRecord.processedDate || payrollRecord.paidDate) {
      this.pdf.setFontSize(10)
      this.pdf.setFont('Arial', 'normal')
      this.pdf.setTextColor(100, 100, 100)
      
      const dateInfo = []
      if (payrollRecord.processedDate) {
        dateInfo.push(`${t.processedDate}: ${new Date(payrollRecord.processedDate).toLocaleDateString(options.language === 'AR' ? 'ar-SA' : 'en-US')}`)
      }
      if (payrollRecord.paidDate) {
        dateInfo.push(`${t.paidDate}: ${new Date(payrollRecord.paidDate).toLocaleDateString(options.language === 'AR' ? 'ar-SA' : 'en-US')}`)
      }
      
      dateInfo.forEach((info, index) => {
        this.pdf.text(info, this.pageWidth / 2, this.currentY + (index * 10), { align: 'center' })
      })
      this.currentY += dateInfo.length * 10 + 10
    }
  }

  private addFooter(options: StatementOptions) {
    const t = this.getTranslations(options.language)
    const footerY = this.pageHeight - 40
    
    // Footer background
    this.pdf.setFillColor(248, 249, 250)
    this.pdf.rect(this.margin, footerY, this.pageWidth - 2 * this.margin, 35, 'F')
    
    // Footer border
    this.pdf.setDrawColor(189, 195, 199)
    this.pdf.setLineWidth(0.5)
    this.pdf.rect(this.margin, footerY, this.pageWidth - 2 * this.margin, 35)
    
    this.pdf.setFontSize(10)
    this.pdf.setFont('Arial', 'italic')
    this.pdf.setTextColor(100, 100, 100)
    
    if (options.includeSignature) {
      const signatureText = options.customFooter || t.authorizedBy
      if (options.language === 'AR') {
        this.pdf.text(signatureText, this.pageWidth - this.margin - 10, footerY + 15, { align: 'right' })
      } else {
        this.pdf.text(signatureText, this.margin + 10, footerY + 15)
      }
    }

    // Page number
    const pageNum = this.pdf.getNumberOfPages()
    const pageText = `${t.page} 1 ${t.of} ${pageNum}`
    this.pdf.text(pageText, this.pageWidth / 2, footerY + 25, { align: 'center' })
  }

  private addSectionHeader(title: string) {
    // Section header background
    this.pdf.setFillColor(44, 62, 80)
    this.pdf.rect(this.margin, this.currentY, this.pageWidth - 2 * this.margin, 12, 'F')
    
    // Section header text
    this.pdf.setFontSize(12)
    this.pdf.setFont('Arial', 'bold')
    this.pdf.setTextColor(255, 255, 255)
    this.pdf.text(title, this.margin + 10, this.currentY + 8)
    
    this.currentY += 15
  }

  private formatCurrency(amount: number, language: 'EN' | 'AR'): string {
    const formatted = new Intl.NumberFormat('en-US', {
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    }).format(amount)
    return language === 'AR' ? `${formatted} د.ل` : `${formatted} LYD`
  }

  private checkPageBreak(requiredSpace: number) {
    if (this.currentY + requiredSpace > this.pageHeight - 50) {
      this.pdf.addPage()
      this.currentY = 30
    }
  }

  private addDramaticHeader(statementData: EmployeeStatementData, options: StatementOptions) {
    const t = this.getTranslations(options.language)
    const { companyInfo } = statementData
    const isArabic = options.language === 'AR'
    
    // Dramatic page border with multiple layers
    this.pdf.setDrawColor(41, 98, 255)
    this.pdf.setLineWidth(2)
    this.pdf.rect(3, 3, this.pageWidth - 6, this.pageHeight - 6)
    
    this.pdf.setDrawColor(52, 152, 219)
    this.pdf.setLineWidth(1)
    this.pdf.rect(6, 6, this.pageWidth - 12, this.pageHeight - 12)
    
    this.pdf.setDrawColor(174, 214, 241)
    this.pdf.setLineWidth(0.5)
    this.pdf.rect(9, 9, this.pageWidth - 18, this.pageHeight - 18)
    
    // Dramatic header background with gradient simulation
    const headerHeight = 85
    
    // Main header background
    this.pdf.setFillColor(13, 71, 161)
    this.pdf.rect(this.margin, this.currentY, this.pageWidth - 2 * this.margin, headerHeight, 'F')
    
    // Gradient overlay effect
    this.pdf.setFillColor(25, 118, 210, 0.3)
    this.pdf.rect(this.margin, this.currentY, this.pageWidth - 2 * this.margin, headerHeight / 2, 'F')
    
    // Top accent stripe
    this.pdf.setFillColor(255, 193, 7)
    this.pdf.rect(this.margin, this.currentY, this.pageWidth - 2 * this.margin, 5, 'F')
    
    this.currentY += 15
    
    // Enhanced logo section with shadow effect
    if (options.includeLogo) {
      const logoX = isArabic ? this.pageWidth - this.margin - 60 : this.margin + 12
      
      // Logo shadow
      this.pdf.setFillColor(0, 0, 0, 0.2)
      this.pdf.circle(logoX + 23, this.currentY + 16, 18, 'F')
      
      // Logo container with premium styling
      this.pdf.setFillColor(255, 255, 255)
      this.pdf.circle(logoX + 22, this.currentY + 15, 17, 'F')
      
      this.pdf.setDrawColor(255, 193, 7)
      this.pdf.setLineWidth(2)
      this.pdf.circle(logoX + 22, this.currentY + 15, 17)
      
      // Premium logo design
      this.pdf.setFillColor(13, 71, 161)
      this.pdf.circle(logoX + 22, this.currentY + 15, 14, 'F')
      
      this.pdf.setFontSize(10)
      this.pdf.setFont('Arial', 'bold')
      this.pdf.setTextColor(255, 255, 255)
      this.pdf.text('LOGO', logoX + 22, this.currentY + 17, { align: 'center' })
    }
    
    // Dramatic company branding
    const textX = isArabic 
      ? this.pageWidth - this.margin - 20
      : this.margin + (options.includeLogo ? 80 : 20)
    
    // Company name with dramatic styling
    this.pdf.setTextColor(255, 255, 255)
    this.pdf.setFontSize(24)
    this.pdf.setFont('Arial', 'bold')
    this.pdf.text(
      companyInfo.name.toUpperCase(),
      textX,
      this.currentY + 8,
      { align: isArabic ? 'right' : 'left' }
    )
    
    // Subtitle with accent color
    this.pdf.setTextColor(255, 193, 7)
    this.pdf.setFontSize(12)
    this.pdf.setFont('Arial', 'bold')
    this.pdf.text(
      'HUMAN RESOURCES DEPARTMENT',
      textX,
      this.currentY + 18,
      { align: isArabic ? 'right' : 'left' }
    )
    
    // Enhanced contact information
    this.pdf.setFontSize(9)
    this.pdf.setFont('Arial', 'normal')
    this.pdf.setTextColor(240, 245, 251)
    
    const contactInfo = [
      `📍 ${companyInfo.address}`,
      `📞 ${companyInfo.phone}`,
      `📧 ${companyInfo.email}`,
      companyInfo.website ? `🌐 ${companyInfo.website}` : '',
      companyInfo.taxNumber ? `🏛️ Tax: ${companyInfo.taxNumber}` : ''
    ].filter(Boolean)
    
    contactInfo.forEach((info, index) => {
      this.pdf.text(
        info,
        textX,
        this.currentY + 28 + (index * 6),
        { align: isArabic ? 'right' : 'left' }
      )
    })

    this.currentY += headerHeight + 10

    // Dramatic document title with shadow effect
    this.pdf.setFillColor(0, 0, 0, 0.1)
    this.pdf.rect(this.margin + 2, this.currentY + 2, this.pageWidth - 2 * this.margin, 25, 'F')
    
    this.pdf.setFillColor(220, 53, 69)
    this.pdf.rect(this.margin, this.currentY, this.pageWidth - 2 * this.margin, 25, 'F')
    
    // Title text with dramatic styling
    this.pdf.setFontSize(26)
    this.pdf.setFont('Arial', 'bold')
    this.pdf.setTextColor(255, 255, 255)
    this.pdf.text(
      t.employeeStatement.toUpperCase(),
      this.pageWidth / 2,
      this.currentY + 16,
      { align: 'center' }
    )

    this.currentY += 30

    // Statement metadata with enhanced presentation
    this.pdf.setFillColor(248, 249, 250)
    this.pdf.rect(this.margin, this.currentY, this.pageWidth - 2 * this.margin, 18, 'F')
    this.pdf.setDrawColor(52, 73, 94)
    this.pdf.setLineWidth(0.8)
    this.pdf.rect(this.margin, this.currentY, this.pageWidth - 2 * this.margin, 18)
    
    this.pdf.setFontSize(14)
    this.pdf.setFont('Arial', 'bold')
    this.pdf.setTextColor(52, 73, 94)
    
    const statementInfo = `${t.statementNumber}: ${statementData.statementNumber}`
    this.pdf.text(
      statementInfo,
      this.pageWidth / 2,
      this.currentY + 12,
      { align: 'center' }
    )

    this.currentY += 25

    // Confidential stamp with dramatic styling
    this.pdf.setFontSize(12)
    this.pdf.setTextColor(220, 53, 69)
    this.pdf.setFont('Arial', 'bold')
    this.pdf.text(
      `🔒 ${t.confidential}`,
      this.pageWidth / 2,
      this.currentY,
      { align: 'center' }
    )

    this.currentY += 18

    // Timestamp with professional styling
    if (options.includeTimestamp) {
      this.pdf.setFontSize(10)
      this.pdf.setTextColor(108, 117, 125)
      this.pdf.setFont('Arial', 'normal')
      
      const timestamp = new Date().toLocaleString(options.language === 'AR' ? 'ar-SA' : 'en-US')
      const reportInfo = [
        `${t.generatedOn}: ${timestamp}`,
        `${t.generatedBy}: ${statementData.generatedBy}`
      ]
      
      reportInfo.forEach((info, index) => {
        this.pdf.text(
          info,
          this.pageWidth / 2,
          this.currentY + (index * 8),
          { align: 'center' }
        )
      })
      this.currentY += 20
    }

    // Professional separator with gradient effect
    this.pdf.setDrawColor(52, 73, 94)
    this.pdf.setLineWidth(1.5)
    this.pdf.line(this.margin, this.currentY, this.pageWidth - this.margin, this.currentY)
    
    this.pdf.setDrawColor(174, 214, 241)
    this.pdf.setLineWidth(0.5)
    this.pdf.line(this.margin, this.currentY + 2, this.pageWidth - this.margin, this.currentY + 2)
    
    this.currentY += 25
  }

  private addDramaticFooter(options: StatementOptions) {
    const t = this.getTranslations(options.language)
    const footerY = this.pageHeight - 50
    
    // Dramatic footer background with gradient
    this.pdf.setFillColor(44, 62, 80)
    this.pdf.rect(this.margin, footerY, this.pageWidth - 2 * this.margin, 45, 'F')
    
    // Top accent line
    this.pdf.setFillColor(255, 193, 7)
    this.pdf.rect(this.margin, footerY, this.pageWidth - 2 * this.margin, 3, 'F')
    
    // Border styling
    this.pdf.setDrawColor(52, 73, 94)
    this.pdf.setLineWidth(1)
    this.pdf.rect(this.margin, footerY, this.pageWidth - 2 * this.margin, 45)
    
    // Authorization signature with dramatic styling
    if (options.includeSignature) {
      this.pdf.setFontSize(11)
      this.pdf.setFont('Arial', 'bold')
      this.pdf.setTextColor(255, 255, 255)
      
      const signatureText = options.customFooter || t.authorizedBy
      
      this.pdf.text(
        '✓ ' + signatureText,
        this.pageWidth / 2,
        footerY + 15,
        { align: 'center' }
      )
      
      // Signature line
      this.pdf.setDrawColor(255, 193, 7)
      this.pdf.setLineWidth(1)
      this.pdf.line(this.margin + 40, footerY + 25, this.pageWidth - this.margin - 40, footerY + 25)
    }

    // Enhanced page numbering
    const pageNum = this.pdf.getNumberOfPages()
    const pageText = `${t.page} 1 ${t.of} ${pageNum}`
    
    this.pdf.setFontSize(10)
    this.pdf.setFont('Arial', 'normal')
    this.pdf.setTextColor(189, 195, 199)
    this.pdf.text(pageText, this.pageWidth / 2, footerY + 35, { align: 'center' })
    
    // Generation timestamp in footer
    this.pdf.setFontSize(8)
    this.pdf.setTextColor(174, 182, 191)
    const timestamp = new Date().toISOString().split('T')[0]
    this.pdf.text(
      `Generated: ${timestamp}`,
      this.pageWidth - this.margin - 5,
      footerY + 42,
      { align: 'right' }
    )
  }

  async generateEmployeeStatement(
    statementData: EmployeeStatementData, 
    options: StatementOptions
  ): Promise<Blob> {
    // Reset PDF with enhanced settings
    this.pdf = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4'
    })
    this.currentY = 15
    this.pageWidth = this.pdf.internal.pageSize.width
    this.pageHeight = this.pdf.internal.pageSize.height

    // Apply theme
    if (options.theme === 'dark') {
      this.pdf.setFillColor(30, 30, 30)
      this.pdf.rect(0, 0, this.pageWidth, this.pageHeight, 'F')
    }

    // Add content sections with dramatic styling
    this.addDramaticHeader(statementData, options)
    this.addEmployeeDetails(statementData, options)
    this.addSalaryBreakdown(statementData, options)
    this.addPaymentStatus(statementData, options)
    this.addDramaticFooter(options)

    // Convert to blob
    return new Promise((resolve) => {
      const pdfBlob = this.pdf.output('blob')
      resolve(pdfBlob)
    })
  }

  async downloadEmployeeStatement(
    statementData: EmployeeStatementData, 
    options: StatementOptions
  ): Promise<void> {
    const blob = await this.generateEmployeeStatement(statementData, options)
    const filename = `statement_${statementData.employee.name.replace(/\s+/g, '_')}_${statementData.statementNumber}.pdf`
    
    const url = URL.createObjectURL(blob)
    const link = document.createElement('a')
    link.href = url
    link.download = filename
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    URL.revokeObjectURL(url)
  }
}

export const employeeStatementGenerator = new EmployeeStatementGenerator()
export default employeeStatementGenerator
